"""
Copyright 2013.  Los Alamos National Security, LLC.
This material was produced under U.S. Government contract
DE-AC52-06NA25396 for Los Alamos National Laboratory (LANL), which is
operated by Los Alamos National Security, LLC for the U.S. Department
of Energy. The U.S. Government has rights to use, reproduce, and
distribute this software.  NEITHER THE GOVERNMENT NOR LOS ALAMOS
NATIONAL SECURITY, LLC MAKES ANY WARRANTY, EXPRESS OR IMPLIED, OR
ASSUMES ANY LIABILITY FOR THE USE OF THIS SOFTWARE.  If software is
modified to produce derivative works, such modified software should be
clearly marked, so as not to confuse it with the version available
from LANL.

Licensed under the Mozilla Public License, Version 2.0 (the
"License"); you may not use this file except in compliance with the
License. You may obtain a copy of the License at
http://www.mozilla.org/MPL/2.0/

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
implied. See the License for the specific language governing
permissions and limitations under the License.
"""

"""
Handle Windows post-installation
"""

import  os, sys, shutil, time, traceback

try:

    ##############################
    import _winreg as winreg, ctypes

    class Registry(object):
        def __init__(self, key_location, key_path):
            self.reg_key = winreg.OpenKey(key_location, key_path,
                                          0, winreg.KEY_ALL_ACCESS)

        def get_key(self, name):
            try:
                value, _ = winreg.QueryValueEx(self.reg_key, name)
            except WindowsError:
                return None
            return value

        def set_key(self, name, value):
            try:
                _, reg_type = winreg.QueryValueEx(self.reg_key, name)
            except WindowsError:
                # use  string as default reg_type
                reg_type = winreg.REG_SZ
            winreg.SetValueEx(self.reg_key, name, 0, reg_type, value)

        def delete_key(self, name):
            try:
                winreg.DeleteValue(self.reg_key, name)
            except WindowsError:
                # Ignores if the key value doesn't exist
                pass


    class EnvironmentVariables(Registry):
        """
        Permanently add/append/remove environment variables
        """
        def __init__(self):
            super(EnvironmentVariables, self).__init__(
                winreg.HKEY_LOCAL_MACHINE,
                r'SYSTEM\CurrentControlSet\Control\Session Manager\Environment')

        def add(self, key, value):
            self.set_key(key, value)
            self.refresh()

        def append(self, key, value, join=''):
            prev = self.get_key(key)
            if prev != None:
                for path in prev.split(';'):
                    if value == path:
                        return  ## already present, do nothing
                self.set_key(key, prev + join + value)
            else:
                self.set_key(key, value)
            self.refresh()

        def remove(self, key):
            self.delete_key(key)
            self.refresh()

        def refresh(self):
            HWND_BROADCAST = 0xFFFF
            WM_SETTINGCHANGE = 0x1A
            SMTO_ABORTIFHUNG = 0x0002

            result = ctypes.c_long()
            SendMessageTimeoutW = ctypes.windll.user32.SendMessageTimeoutW
            SendMessageTimeoutW(HWND_BROADCAST, WM_SETTINGCHANGE, 0,
                                'Environment', SMTO_ABORTIFHUNG, 5000,
                                ctypes.byref(result));

    ##############################

    try:
        ## wininst version
        desktop = get_special_folder_path('CSIDL_DESKTOPDIRECTORY')
        app_dir = get_special_folder_path('CSIDL_APPDATA')

        def uninstall():
            pass

    except:
        ## MSI version
        from win32com.client import Dispatch

        desktop = os.path.join(os.environ['HOMEPATH'], 'Desktop')
        app_dir = os.environ['APPDATA']

        def create_shortcut(target, title, filename, param, wrk_dir, icon):
            shell = Dispatch('WScript.Shell')
            link = shell.CreateShortCut(filename)
            link.TargetPath = target
            link.Description = title
            link.Arguments = param
            link.WorkingDirectory = wrk_dir
            link.IconLocation = icon
            link.save()

        def file_created(f):
            pass

        def uninstall():
            for script in scripts:
                os.remove(os.path.join(desktop, script + '.lnk'))
            os.remove(os.path.join(app_dir, 'python.rc.bat'))


    ##############################

    scripts = @@{SHORTCUT_SCRIPTS}
    icon_paths = @@{SHORTCUT_ICONS}
    parameters = ''
    working_dir = desktop
    python_dir = sys.prefix

    ## MSI calls this with no args
    if len(sys.argv) < 2 or sys.argv[1] == '-install':
        for i in range(len(scripts)):
            create_shortcut(os.path.join(python_dir, 'Scripts',
                                         scripts[i] + '.bat'),
                            'Shortcut to ' + scripts[i],
                            os.path.join(desktop, scripts[i] + '.lnk'),
                            parameters, working_dir,
                            os.path.join(sys.prefix, 'Lib', 'site-packages',
                                         icon_paths[i]))
            file_created(os.path.join(desktop, scripts[i] + '.lnk'))
        try:
            env = EnvironmentVariables()
            env.append('PATH', python_dir, ';')
            env.append('PATH', os.path.join(python_dir, 'Scripts'), ';')
            env.append('PATH', os.path.join(python_dir, 'Lib', 'site-packages',
                                            '@@{PACKAGE}'), ';')
        except:
            helper = os.path.join(app_dir, 'python.rc.bat')
            f = open(helper, 'a')
            f.write('@set PATH=%PATH%;"' +  python_dir + '";"' +
                    os.path.join(python_dir, 'Scripts') + '";"' + 
                    os.path.join(python_dir, 'Lib', 'site-packages',
                                 '@@{PACKAGE}') + '"\n')
            f.close()
            file_created(helper)


    if len(sys.argv) > 1 and sys.argv[1] == '-remove':
        uninstall()

except:
    traceback.print_exc(file=sys.stdout)
    time.sleep(30)
    sys.exit(1)

sys.exit(0)
